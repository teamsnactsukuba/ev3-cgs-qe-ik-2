// Test.rr
// Programs used in tests
// Mizuki Yoshizawa and Akira Terui
// Team SNAC Tsukuba, 2023

// Print the elements in Set
def test_print(Set){
  for(I = 0; I < length(Set); I++){
    print([I + 1])$
    print(Set[I])$
    print(" ")$
  }
}

// Generating c_1, s_1, c_4, s_4, c_7, s_7
def generate_cs(ThetaSet, Var){
  ThetaSetSize = length(ThetaSet);
  VarSize = length(Var);
  VarSet = [];
  Count = 0;
  for(I = 0; I < VarSize; I){
    VarSet = append(VarSet, [[Var[I], dsin(eval(ThetaSet[Count]))]]);
    VarSet = append(VarSet, [[Var[I+1], dcos(eval(ThetaSet[Count]))]]);
    I = I + 2;
  }
  return VarSet;
}

// Generate the coordinates by solving forward kinematics problem
def generate_coodinate(ThetaSet, Var){
  VarSet = generate_cs(ThetaSet, Var);
  VarSetSize = length(VarSet);
  X = -(112*c1*c4*s7 - 16*c1*c4 + 112*c1*s4*c_7 + 136*c_1*s_4 - 44*(2^(1/2))*c_1);
  Y = -(112*s_1*c_4*s_7 - 16*s_1*c_4 + 112*s_1*s_4*c_7 + 136*s_1*s_4 - 44*(2^(1/2))*s_1);
  Z = -(-112*c_4*c_7 - 136*c_4 + 112*s_4*s_7 - 16*s_4 -104 - 44*(2^(1/2)));
  for(I = 0; I < VarSetSize; I++){
    X = subst(X, VarSet[I][0], VarSet[I][1]);
    Y = subst(Y, VarSet[I][0], VarSet[I][1]);
    Z = subst(Z, VarSet[I][0], VarSet[I][1]);
  }
  return [[x, deval(X)], [y, deval(Y)], [z, deval(Z)]];
}

// Verify the solution
def kai_check(F, KaiSet){
    KaiSetSize = length(KaiSet);
    Coordinate = [];
  for(I = 0; I < KaiSetSize; I++){
    Kai = KaiSet[I];
    KaiSize = length(Kai);
    for(J = 0; J < KaiSize; J++){
      F = map(subst, F, Kai[J][0], Kai[J][1]);
    }
    Coordinate = append(Coordinate, [[pari(roots, eval(F[0]))[0], pari(roots, eval(F[1]))[0], pari(roots, eval(F[2]))[0]]]);
  }
  return Coordinate;
}

// Computing theta fro c_i and s_i
def theta_check(KaiSet){
  KaiSetSize = length(KaiSet);
  ThetaSet = [];
  for(I = 0; I < KaiSetSize; I++){
  Kai = KaiSet[I];
    KaiSize = length(Kai);
    Theta = [];
    for(J = 0; J < KaiSize; J){
      T = dasin(eval(Kai[J][1]));
      Theta = append(Theta, [T]);
      J + 2;
    }
    ThetaSet = append(ThetaSet, [Theta]);
  }
  return ThetaSet;  
}

// Transform an output for the use in .dat
def print_dat(Set){
  print_format(Set|list=[" "," "], sep = " ");
}