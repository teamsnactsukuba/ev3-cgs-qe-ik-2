// IKP_Trajectory.rr
// A program for computing path and trajectory planning 
// Mizuki Yoshizawa and Akira Terui
// Team SNAC Tsukuba, 2023

load("IKP_Point.rr")$

def ikp_trajectory(CGS, Param, Var, Jun, P0, Pf, S, T){
  VarSet = [];
  for(I = 0; I < T + 1; I++){
    SS = subst(S, t, I);
    Coordinate = coodenate_subst(P0, Pf, SS);
    P = ikp_point(CGS, Param, Var, Jun, Coordinate);
    VarSet = append(VarSet, [P]);
  }
  return VarSet;
}

// Calculate current position of the end-effector $p_d$ from $p_0,p_f,s$ 
def coodenate_subst(P0, Pf, S){
  X = subst(x0*(1-s)+xf*s, x0, P0[0], xf, Pf[0], s, S);
  Y = subst(y0*(1-s)+yf*s, y0, P0[1], yf, Pf[1], s, S);
  Z = subst(z0*(1-s)+zf*s, z0, P0[2], zf, Pf[2], s, S);
  return [X, Y, Z];
}