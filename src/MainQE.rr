// MainQE.rr
// A program for Quantifier Elimination using Comprehensive Gröbner Systems
// Mizuki Yoshizawa and Akira Terui
// Team SNAC Tsukuba, 2023

load("Segment.rr")$
load("NewKapur.rr")$
load("Kapur.rr")$

def mainqe(CGS, Vari, Para){
  CGSSize = length(CGS);
  for(I = 0; I < CGSSize; I++){
    SG = CGS[I];
    G = SG[1];
    Form = [];
    Check = grobnerpara_check(G, Para); /* グレブナー基底がパラメータのみで構成されるかのチェック */
    if(Check == 0){
      print("グレブナー基底は{0}である")$
    }else{
      print("グレブナー基底は{0}でない")$ 
      IdealCheck = zerodimideal_check(G, Vari); /* 0次元イデアルであるかのチェック */
      if(IdealCheck == 1){
        Form = append(Form, [zerodimqe(G, Vari, Para)]);
      }else{ 
        print("グレブナー基底は0次元イデアルでない")$
      }
    }
  }
  return Form;
}

def zerodimqe(Set, Vari, Para){
  Check = grobnerpara_check(Set, Para); /* グレブナー基底がパラメータのみで構成されるかのチェック */
  if(Check == 0){
    Form = [];
  }else{
    Form = generate_kai(Set, 1, Vari);
  }
  return Form;
}


/* 0次元イデアルであるかのチェック */
def zerodimideal_check(Set, Vari){
  /* G = gr(Set, Vari, 2); */
  HtSet = generate_htset(Set, Vari);
  return vari_beki(HtSet, Vari); /* Variの各変数のべきとなる元がSetに含まれるかのチェック */
} 

/* グレブナー基底がパラメータのみで構成されるかのチェック */
def grobnerpara_check(Set, Para){
  SetSize = length(Set);
  Frag = 0;
  for(I = 0; I < SetSize; I++){
    Vars = vars(eval(Set[I]))$
    VarsSize = length(Vars)$
    for(J = 0; J < VarsSize; J++){
      if(memberof(Vars[J], Para) != 1){
        Frag = 1$
        break$
      }
    }
  }
  if(Frag == 0){
    return 0;
  }else{
    return 1;
  }
}

/* 代入する集合の生成 */
def generate_substset(GSet, Vari){
  GSet = map(eval, GSet);
  DpGSet = map(dp_ptod, GSet, Vari);
  DpGSetSize = length(DpGSet);
  SubstSet = [];
  for(I = 0; I < DpGSetSize; I++){
    DpHt = dp_ht(DpGSet[I]);
    Ht = dp_dtop(DpHt, Vari);
    Hc = dp_hc(DpGSet[I]);
    DpRest = dp_rest(DpGSet[I]);
    Rest = dp_dtop(DpRest, Vari);    
    SubstSet = append(SubstSet, [[Ht, - Rest / Hc]]); 
  }
  return SubstSet;
}

/* 単項式の代入 */
def msubst(Poly, MA, MB, Vari){
  DpPoly = dp_ptod(Poly, Vari);
  NewPoly = 0;
  while(DpPoly != 0){
    DpHm = dp_hm(DpPoly);
    Hm = dp_dtop(DpHm, Vari);
    X = tdiv(Hm, MA);
    if(X == 0){
      NewPoly = NewPoly + Hm;
    }else{
      NewPoly = NewPoly + X*MB;
    }
    DpPoly = dp_rest(DpPoly);
  }
  return NewPoly;
}

/* 多項式を標準単項式のみで表現する */
def poly_monomialbase(Poly, Sets, Vari){
  SetsSize = length(Sets);
  NewPoly = Poly;
  X = NewPoly;
  while(1){
    for(I = 0; I < SetsSize; I++){
      NewPoly = msubst(NewPoly, Sets[I][0], Sets[I][1], Vari); /* 単項式の代入 */
    }
    if(NewPoly == X){
      break;
    }else{
      X = NewPoly;
    }
  }
  return NewPoly;
}

/* [係数, 項] の集合の生成 */
def generate_hchtset(Poly, Vari){
  HcHt = [];
  DpPoly = dp_ptod(Poly, Vari);
  while(DpPoly != 0){
    Hc = dp_hc(DpPoly);
    Ht = dp_dtop(dp_ht(DpPoly), Vari);
    HcHt = append(HcHt, [[Hc, Ht]]);
    DpPoly = dp_rest(DpPoly);
  }
  return HcHt;
}

/* 剰余環の基底の計算 */
def generate_monomialbase(GSet, Vari){
  GSet = map(eval, GSet);
  DpGSet = map(dp_ptod, GSet, Vari);
  DpHt = map(dp_ht, DpGSet);
  MonomialBase = map(dp_dtop, dp_mbase(DpGSet), Vari);
  return reverse(MonomialBase);
}

/* 表現行列の計算 */
def generate_expmatrix(Base, Poly, Subst, Vari){
  BaseSize = length(Base);
  EM = [];
  for(I = 0; I < BaseSize; I++){
    X = Base[I] * Poly;
    NewX = poly_monomialbase(X, Subst, Vari); /* 多項式を基底のみで表現する */
    HcHt = generate_hchtset(NewX, Vari); /* [係数, 項] の集合の生成 */
    HcHtSize = length(HcHt)$
    M = [];
    for(J = 0; J < BaseSize; J++){
      Frag = 0;
      for(K = 0; K < HcHtSize; K++){
        if(Base[J] == HcHt[K][1]){
          M = append(M, [HcHt[K][0]]);
          Frag = 1;
          bleak;
        }
      }
      if(Frag == 0){
        M = append(M, [0]);
      }
    }
    EM = append(EM, [M]);
  }
  return EM;
}

/* 固有多項式の計算 */
def generate_kai(Set, Poly, Vari){
  /* G = gr(Set, Vari, 2)$ */
  MonomialBase = generate_monomialbase(Set, Vari); /* 剰余環の基底の計算 */
  MonomialBaseSize = length(MonomialBase);
  SubstSet = generate_substset(Set, Vari); /* 代入する集合の生成 */
  MPoly = [];
  for(I = 0; I < MonomialBaseSize; I++){
    M = [];
    for(J = 0; J < MonomialBaseSize; J++){
      EM = generate_expmatrix(MonomialBase, MonomialBase[I] * MonomialBase[J] * Poly, SubstSet, Vari); /* 表現行列の計算 */
      Q = pari(trace, EM); /* トレースの計算 */
      if(I == J){
        M = append(M, [Q - x]);
      }else{
        M = append(M, [Q]);
      }
    }
    MPoly = append(MPoly, [M]);
  }
  return matrix_det(MPoly);
}

end$