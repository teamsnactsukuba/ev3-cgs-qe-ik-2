/*&jp \documentclass{jarticle}
\begin{document}
*/
/*$OpenXM$ */
/* Old: m,  see Attic */
/* Use oxweave to generate documents on this source code
   Use iso-2022 to write this file. No default use of GL and GR is allowed.
*/

load("oxrfc100.rr")$

module mathematica;

localf find_proc$
localf start_org$
localf start$
localf start_unix$
localf start_windows$
localf tree_to_string$
localf foo$
localf rtomstr$
localf complex$
localf n_Eigenvalues$
localf inverse$
localf teXForm$


// extern Xm_noX $ Xm_noX = 0$
extern Xm_noX
extern Xm_unix $
extern Xm_use_timer_to_start_server $

static M_proc$
M_proc = -1$
#define ML_FIND_PROC(P)  P = getopt(proc);\
                          if (type(P) == -1) {\
                             P = find_proc();\
                          }

def find_proc() {

  if (M_proc == -1) {
     A = ox_get_serverinfo();
     /* Look for ox_math. Not yet written */
     /* Start ox_math automatically if there is not ox_sm1 */
     M_proc = start();
  }
  return(M_proc);
}


print("Module mathematica (to communicate with Mathematica) Version 19991113.")$
print(" mathematica.start, mathematica.tree_to_string, mathematica.n_Eigenvalues, ...")$

#define LIST   4
#define VECTOR 5
#define MATRIX 6

/*&jp
  {\tt OpenXM\_HOME} の値を見て {\tt ox\_math} の場所を設定.
  {\tt OpenXM\_HOME} の値がない場合は {\tt /usr/local/OpenXM}
*/ 
/*&eg
  Look up the value of 
  {\tt OpenXM\_HOME} and  determine the place of {\tt ox\_math}.
  If this environmental variable is not set, use the default directory
  {\tt /usr/local/OpenXM}.
*/

static Ox_math_lib$
Ox_math_lib = ox_getenv("OpenXM_HOME")$
if (Ox_math_lib == 0) {
  Ox_math_lib = "/usr/local/OpenXM/src/ox_math"$
} else {
  Ox_math_lib = Ox_math_lib+"/src/ox_math"$
}

/*&jp
  {\tt m\_start()} は {\tt ox\_math} を localhost で起動するための関数.
  {\tt Xm\_noX} の値が 1 だと, X 無しで起動する.
*/

def start_org() {
 if (Xm_noX) {
   P = ox_launch_nox(0,Ox_math_lib+ "/ox_math");
 }else{
   P = ox_launch(0,Ox_math_lib + "/ox_math");
 }
 /* ox_check_errors(P); */
 M_proc = P;
 print("ox_math has started.");
 print("ox_math: Portions copyright 2000 Wolfram Research, Inc. ");
 print("See OpenXM/Copyright/Copyright.mathlink for details.");
 return(P);
}

def start() {
  print("Starting ox_math.");
  print("ox_math: Portions copyright 2000 Wolfram Research, Inc. ");
  print("See OpenXM/Copyright/Copyright.mathlink for details.");
  if (ox_ostype()[0] == "windows" && Xm_unix == 0) 
    return start_windows(0);
  else
    return start_unix();
}

def start_unix() {

 if (Xm_noX) {
   P = ox_launch_nox(0,Ox_math_lib+"/ox_math");
 }else{
   P = ox_launch(0,Ox_math_lib+"/ox_math");
 }

 /* ox_check_errors(P); */
 M_proc = P;
 return(P);
}

def start_windows(U) {

  CPort = generate_port();
  SPort = generate_port();
 
  if (U) {  /* Test on unix. */
    Com = "ox -ox " + Ox_math_lib+"/ox_math " +
          " -data "+ rtostr(SPort) +" -control "+ rtostr(CPort);
    Com = "oxlog xterm -iconic -T ox_math -n ox_math -e "+ Com + "& ";
  }else{
    /* OpenXM_HOME_WIN="c:\\cygwin\\home\\nobuki\\OpenXM";
       OpenXM_HOME_WIN2="/home/nobuki/OpenXM";
       OpenXM_START_EXE = "c:/windows/command/start";
    */
    OpenXM_HOME_WIN = ox_getenv("OpenXM_HOME_WIN");
    OpenXM_START_EXE = ox_getenv("OpenXM_START_EXE");
    Ox_math_lib = OpenXM_HOME_WIN;
    Ox_sm1_forAsir = OpenXM_HOME_WIN+"\\bin\\ox_math.exe"; 
    F = open_file(Ox_sm1_forAsir);
    if (F < 0) {
      error("ox_math.exe is not existing.  Check your installation.");
      return(-1);
    }
    close_file(F);
    Com = OpenXM_HOME_WIN+"\\bin\\ox -ox " + 
          Ox_sm1_forAsir + " " +
          " -data "+ rtostr(SPort) +" -control "+ rtostr(CPort);
    Com = OpenXM_START_EXE+" /MIN "+Com ;
  }

  print(Com +"\n");
  shell(Com);
  if (Xm_use_timer_to_start_server) {
    print("Waiting for 3 seconds."); sleep(3000); 
  }else{
    purge_stdin(); print("Type in Return to connect to the server.");
    get_line();
  }
  print("Trying to connect to the server...",0)$
  CSocket = try_connect("localhost",CPort);
  SSocket = try_connect("localhost",SPort);
  P = register_server(CSocket,CPort,SSocket,SPort);
  print(" Done.");

 if (Xm_noX) {
   sm1.sm1(P," oxNoX ");
 }
 /* ox_check_errors(P); */
 M_proc = P;
 return(P);
}


/*&jp
  以下でMathematica を呼ぶための補助関数を定義する.
*/

/*&jp 
  {\tt m\_tree\_to\_string(L)} は, {\tt MathLink} の 木形式で与えれた
  オブジエェクトをなるべく asir が理解できる形での, 前置または中置記法
   の文字列に変換する. \\
   例: {\tt m\_tree\_to\_string(["Plus",1,2])} は文字列
       {\tt 1+2} を戻す. \\
   リストの先頭の文字列がキーワードであるが, その文字が変換テーブルにない
   ときは, {\tt m\_} をキーワードの先頭につけて, 関数呼出形式の文字列へ
   変える.
*/

def tree_to_string(L) {
  if (type(L) != LIST) {
     return(rtostr(L));
  }
  N = length(L);
  if (N == 0) return(" ");
  Infix = 0; Prefix = 0;
  if (L[0] == "Plus") {
    Infix = "+";
  }else if (L[0] == "Times") {
    Infix = "*";
  }else if (L[0] == "Power") {
    Infix = "^";
  }else if (L[0] == "Rational") {
    Infix = "/";
  }else if (L[0] == "List") {
    Prefix = "List";
  }else if (L[0] == "Square") {
    Prefix = "sqrt";
  }else if (L[0] == "Sin") {
    Prefix = "sin";
  }else if (L[0] == "Cos") {
    Prefix = "cos";
  }else if (L[0] == "Rule") {
    Prefix = "";
  }else if (L[0] == "Or") {
    Prefix = "List";
  }else if (L[0] == "Less") {
    Infix = "<";
  }else if (L[0] == "Greater") {
    Infix = ">";
  }else if (L[0] == "Inequality") {
    L = [Inequality, L[1], L[3], L[5]];
    N = length(L);
    Infix = "<";
  }else if (L[0] == "Equal") {
    Prefix = "List";
  }
  if (type(Infix) != 0) {
    Ans = "("+tree_to_string(L[1])+")";
    for (I=2; I<N; I++) {
      Ans = Ans+Infix+"("+tree_to_string(L[I])+")";
    }
    return(Ans);
  }else if (type(Prefix) != 0) {
    if (Prefix == "List") {
      Ans = "[";
    }else{
      Ans = Prefix + "(";
    }
    for (I=1; I<N; I++) {
      if (I == 1) {
        Ans = Ans +tree_to_string(L[I]);
      }else{
        Ans = Ans +" , "+tree_to_string(L[I]);
      }
    }
    if (Prefix == "List") {
      return(Ans+"]");
    }else{
      return(Ans+")");
    }
  }else{
    Ans = "m_"+rtostr(L[0])+"(";
    for (I=1; I<N; I++) {
      if (I == 1) {
         Ans = Ans +tree_to_string(L[I]);
      }else{
         Ans = Ans +" , "+tree_to_string(L[I]);
      }
    }
    return(Ans+")");
  }
}



/* Use eval_str() (= ToExpression[] in Mathematica.) to
   translate a string to an object in asir. */
def foo() {
  print(tree_to_string(["Plus",1,x,["Times",2,x]]));
  print(tree_to_string(["Plus",["Sin",2],x,["Times",2,x]]));
  print(tree_to_string(ox_execute_string(0,"Factor[x^10-1]")));
}


/*&jp
  関数 \verb+ mathematica.rtomstr(L) + は asir 形式のオブジェクト L をなるべく
  Mathematica が理解できる形の文字列に変換する.
  たとえば, リスト, ベクトル, 行列 は asir では {\tt [}, {\tt ]}
  で囲むが, Mathematica では, {\tt \{ }, {\tt \}} で囲む.
  現在のところこの関数はこの変換のみ行なっている. \\
  例:
  {\footnotesize
  \begin{verbatim}
   [262] mathematica.rtomstr([1,2,3]);
   {1,2,3}
   [375] A = newvect(3,[x+2,"Hello",[1/2,3]]);
   [ x+2 Hello [1/2,3] ]
   [376] mathematica.rtomstr(A);
   {x+2,Hello,{1/2,3}}
  \end{verbatim}
  }
*/

def rtomstr(L) {
  if (type(L) != LIST && type(L) != VECTOR && type(L) != MATRIX) {
    return(rtostr(L));
  }
  if (type(L) == VECTOR) {
    N = size(L)[0];
  }else if (type(L) == MATRIX) {
    N = size(L)[0];
  }else{
    N = length(L);
  }
  Ans ="{";
  for (I=0; I<N; I++) {
    if (I==0) {
      Ans = Ans + rtomstr(L[I]);
    }else{
      Ans = Ans +","+rtomstr(L[I]);
    }
  }
  Ans = Ans + "}";
  return(Ans);
}

def complex(A,B) {
  return(A+B*@i);
}

/*&jp
  \verb n_Eigenvalues(M) + は行列 {\tt M} の固有値の数値近似を Mathematica
  を利用して求める関数です.
*/
/*&eg
  The function \verb n_Eigenvalues(M) + returns numerical approximations
  of the eigenvalues of the matrix  {\tt M} by calling Mathematica.
*/
/*&C
  \begin{verbatim}
   [360] mathematica.n_Eigenvalues([[1,2],[3,5]]);
   [-0.162278,6.16228]
   [466]  mathematica.n_Eigenvalues([[0,1],[-1,0]]);
   [(-1*@i),(1*@i)]
  \end{verbatim}
*/

def n_Eigenvalues(M) {

  ML_FIND_PROC(P)  ;

  A = rtomstr(M);
  ox_execute_string(P,"N[Eigenvalues["+A+"]]");
  B = ox_pop_cmo(B);
  C = tree_to_string(B);
  return(eval_str(C));
}

/*&jp
  \verb mathematica.inverse(M) + は行列 {\tt M} の逆行列を Mathematica
  を利用して求める関数です.
*/
/*&eg
  The function \verb mathematica.inverse(M) + returns the inverse matrix of
  {\tt M} by calling Mathematica.
*/
/*&C
  \begin{verbatim}
  [682]  mathematica.inverse([[x,y],[x+2,x-1]]);
  [[(x-1)/(x^2+(-y-1)*x-2*y),(-y)/(x^2+(-y-1)*x-2*y)],
   [(-x-2)/(x^2+(-y-1)*x-2*y),(x)/(x^2+(-y-1)*x-2*y)]]
  [683] mathematica.inverse([[1,2],[3,4]]);
  [[-2,1],[3/2,-1/2]]
  \end{verbatim}
*/
def inverse(M) {

  ML_FIND_PROC(P)  ;

  A = rtomstr(M);
  ox_execute_string(P,"Inverse["+A+"]");
  B = ox_pop_cmo(B);
  C = tree_to_string(B);
  return(eval_str(C));
}

/*&jp
  次の関数は, random に N X N 実対称行列を S 個乱数を用いて生成して ($M = M^T$), 
  各々の固有値をMathematica で計算します.
  最後に最大固有値の分布状況を答えます.
  (たとえば, [-10,-9] の間に 3 個, [-9,-8] の間に 14 個, ....,
   [9,10] の間に 4 個 など)
  GNUPLOT で分布のヒストグラムも書きます.
  この問題を random matrix の固有値分布の問題といい,
  Selberg 積分, 直交多項式, (Painleve 関数?)などの問題と関連しています.
*/

/* まだ書いてない. */


def teXForm(M) {

  ML_FIND_PROC(P)  ;

  A = rtomstr(M);
  ox_execute_string(P,"ToString[TeXForm["+A+"]]");
  B = ox_pop_cmo(P);
  C = tree_to_string(B);
  return C;
}
/* example:
   teXForm("2/x");
   example:
   teXForm((x^2-1)/x);
*/

endmodule;

end$

/*&jp \end{document} */
